/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package covid.mortality.rate.per.county;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import java.io.FileWriter;

/**
 *
 * @author s-chcopley
 */
class MyCustomFilter extends javax.swing.filechooser.FileFilter {
            @Override
            public boolean accept(File file) {
                return file.isDirectory() || file.getAbsolutePath() .endsWith(".csv");
            }
            @Override
            public String getDescription() {
                return "CSV documents (*.csv)";
            }
}
/**
 *
 * @author s-chcopley
 */
public class COVIDMortalityRatePerCounty extends javax.swing.JFrame {
    public int GetDeathIndexForCaseIndex(String County, String Date) {
        for (int i = 0; i < DeathCounts.size(); i++) {
            if (DeathCounties.get(i).equals(County) && DeathDates.get(i).equals(Date)) {
                return i;
            }
        }
        return -1;
    }
    public void WriteFileAsMortalityRateData(FileWriter file){
        System.out.println("Writing out mortality data...");
        try {
             file.write("county,date,mortality\n");
            for (int i = 0; i < CaseCounts.size(); i++) {
                String County = CaseCounties.get(i);
                String Date = CaseDates.get(i);
                Integer CaseCount = CaseCounts.get(i);
                Integer DeathIndex = GetDeathIndexForCaseIndex(County, Date);
                if (DeathIndex != -1) {
                    Integer DeathCount = DeathCounts.get(DeathIndex);
                    double MortalityRate = (double)(DeathCount) / (double)(CaseCount);
                    file.write(String.format("%s,%s,%f\n",County,Date,MortalityRate));
                    System.out.println(String.format("County %s and Date %s is Death Index %d", County, Date, DeathIndex));
                }
                else {
                    System.out.println(String.format("County %s and Date %s Not found in death data", County, Date));
                } 
            }
            file.flush();
            file.close();
        } catch(Exception ex) {
            Logger.getLogger(COVIDMortalityRatePerCounty.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("Finished writing out mortality data...");
    }
    public void ReadFileAsCaseData(File file){
        System.out.println("Reading case data...");
        try {
            Scanner sc = new Scanner(file);
            sc.useDelimiter("\n");
            sc.next();
            CaseCounties.clear();
            CaseDates.clear();
            CaseCounts.clear();
            while (sc.hasNext()){
                String DataLine = sc.next();
                System.out.println(DataLine);
                String[] DataValues = DataLine.split(",");
                CaseCounties.add(DataValues[0]);
                CaseDates.add(DataValues[1]);
                CaseCounts.add(Integer.parseInt(DataValues[2]));
            }
            sc.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(COVIDMortalityRatePerCounty.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("Finished reading case data.");
    }
    public void ReadFileAsDeathData(File file){
        System.out.println("Reading death data.");
        try {
            Scanner sc = new Scanner(file);
            sc.useDelimiter("\n");
            sc.next();
            DeathCounties.clear();
            DeathDates.clear();
            DeathCounts.clear();
            while (sc.hasNext()){
                String DataLine = sc.next();
                System.out.println(DataLine);
                String[] DataValues = DataLine.split(",");
                DeathCounties.add(DataValues[0]);
                DeathDates.add(DataValues[1]);
                DeathCounts.add(Integer.parseInt(DataValues[2]));
            }
            sc.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(COVIDMortalityRatePerCounty.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("Finished reading death data.");
    }
    /**
     * Creates new form COVIDMortalityRatePerCounty
     */
    public COVIDMortalityRatePerCounty() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        CaseCounties = new ArrayList<>();
        CaseDates = new ArrayList<>();
        CaseCounts = new ArrayList<>();
        DeathCounties = new ArrayList<>();
        DeathDates = new ArrayList<>();
        DeathCounts = new ArrayList<>();
        fileChooser = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        textarea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        OpenCOVIDCaseData = new javax.swing.JMenuItem();
        OpenCOVIDDeathData = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();
        ExportCOVIDMortalityRateData = new javax.swing.JMenuItem();

        fileChooser.setDialogTitle("Open COVID Data");
        fileChooser.setFileFilter(new MyCustomFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("COVID Mortality Rate Per County");

        textarea.setColumns(20);
        textarea.setRows(5);
        jScrollPane1.setViewportView(textarea);

        jMenu1.setText("File");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        ExportCOVIDMortalityRateData.setText("Export COVID Mortality Rate Data");
        ExportCOVIDMortalityRateData.addActionListener(new java.awt.event.ActionListener(){
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileWriter file = PickExportFile(evt);
                WriteFileAsMortalityRateData(file);
            }
        });
        jMenu1.add(ExportCOVIDMortalityRateData);
        OpenCOVIDCaseData.setText("Open COVID Case Data");
        OpenCOVIDCaseData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                File file = PickCSVFile(evt);
                ReadFileAsCaseData(file);
            }
        });
        jMenu1.add(OpenCOVIDCaseData);
        
        OpenCOVIDDeathData.setText("Open COVID Death Data");
        OpenCOVIDDeathData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                File file = PickCSVFile(evt);
                ReadFileAsDeathData(file);
            }
        });
        jMenu1.add(OpenCOVIDDeathData);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jMenu1.add(Exit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
        class MyCustomFilter extends javax.swing.filechooser.FileFilter {
            @Override
            public boolean accept(File file) {
                return file.isDirectory() || file.getAbsolutePath() .endsWith(".txt");
            }
            @Override
            public String getDescription() {
                return "Text documents (*.txt)";
            }
        }
    }                                      

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
        System.exit(0);
    }                                    
    private FileWriter PickExportFile(java.awt.event.ActionEvent evt) {
        int returnVal = fileChooser.showSaveDialog( this );
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            java.io.File saved_file = fileChooser.getSelectedFile();
            String file_name = saved_file.toString();
            try {
                return new FileWriter(file_name);
            } catch (IOException ex) {
                Logger.getLogger(COVIDMortalityRatePerCounty.class.getName()).log(Level.SEVERE, null, ex);
                return null;
            }
        }
        return null;
    }
    private File PickCSVFile(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
         int returnVal = fileChooser.showOpenDialog(this);
         if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile ();
            return file;
        } else {
            System.out.println("File access cancelled by user.");
            return null;
        }
    }                                    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(COVIDMortalityRatePerCounty.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(COVIDMortalityRatePerCounty.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(COVIDMortalityRatePerCounty.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(COVIDMortalityRatePerCounty.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new COVIDMortalityRatePerCounty().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenuItem OpenCOVIDCaseData;
    private javax.swing.JMenuItem OpenCOVIDDeathData;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea textarea;
    private javax.swing.JMenuItem ExportCOVIDMortalityRateData;
    
    
    private ArrayList<String> CaseCounties;
    private ArrayList<String> CaseDates;
    private ArrayList<Integer> CaseCounts;
    private ArrayList<String> DeathCounties;
    private ArrayList<String> DeathDates;
    private ArrayList<Integer> DeathCounts;
    // End of variables declaration                   
}